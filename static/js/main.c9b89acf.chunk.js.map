{"version":3,"sources":["TaskContext.js","components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TaskContext","createContext","TaskContextProvider","props","useState","todos","setTodos","Provider","value","addTodo","todo","removeTodo","todoele","filter","task","toggleComplete","map","completed","children","TodoForm","useContext","setTodo","className","onSubmit","e","preventDefault","trim","TextField","label","type","name","onChange","target","Todo","ListItem","style","display","Checkbox","checked","onClick","Typography","variant","textDecoration","IconButton","TodoList","id","key","uuid4","List","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kTAEaA,EAAcC,0BAoDZC,EAlDa,SAACC,GAAW,IAAD,EACXC,mBAAS,IADE,mBAC9BC,EAD8B,KACvBC,EADuB,KAqCrC,OACE,kBAACN,EAAYO,SAAb,CACEC,MAAO,CACLH,QACAI,QAzBN,SAAiBC,GACfJ,EAAS,CAACI,GAAF,mBAAWL,MAyBfM,WARN,SAAoBC,GAClBN,EAASD,EAAMQ,QAAO,SAACH,GAAD,OAAUA,EAAKI,OAASF,EAAQE,UAQlDC,eAvBN,SAAwBH,GACtBN,EACED,EAAMW,KAAI,SAACN,GACT,OAAIA,EAAKI,OAASF,EAAQE,KACjB,eACFJ,EADL,CAEEO,WAAYP,EAAKO,YAGdP,SAiBRP,EAAMe,WCJEC,MAzCf,WAAqB,IACXV,EAAYW,qBAAWpB,GAAvBS,QADU,EAEML,mBAAS,CAC/BU,KAAM,GACNG,WAAW,IAJK,mBAEXP,EAFW,KAELW,EAFK,KAsBlB,OACE,0BAAMC,UAAU,wBAAwBC,SAV1C,SAAsBC,GACpBA,EAAEC,iBAEEf,EAAKI,KAAKY,SACZjB,EAAQ,eAAKC,IACbW,EAAQ,eAAKX,EAAN,CAAYI,KAAM,SAMzB,yBAAKQ,UAAU,SACb,kBAACK,EAAA,EAAD,CACEC,MAAM,OACNC,KAAK,OACLC,KAAK,OACLtB,MAAOE,EAAKI,KACZiB,SAvBR,SAA+BP,GAG7BH,EAAQ,eAAKX,EAAN,CAAYI,KAAMU,EAAEQ,OAAOxB,YAsB7B,MAEH,yBAAKc,UAAU,UACb,4BAAQO,KAAK,UAAb,a,8DCPOI,MA5Bf,YAAyB,IAATvB,EAAQ,EAARA,KAAQ,EACiBU,qBAAWpB,GAA1Ce,EADc,EACdA,eAAgBJ,EADF,EACEA,WASxB,OACE,kBAACuB,EAAA,EAAD,CAAUC,MAAO,CAAEC,QAAS,SAC1B,kBAACC,EAAA,EAAD,CAAUC,QAAS5B,EAAKO,UAAWsB,QAVvC,WACExB,EAAeL,MAUb,kBAAC8B,EAAA,EAAD,CACEC,QAAQ,QACRN,MAAO,CACLO,eAAgBhC,EAAKO,UAAY,eAAiB,OAGnDP,EAAKI,MAER,kBAAC6B,EAAA,EAAD,CAAYJ,QAfhB,WACE5B,EAAWD,KAeP,kBAAC,IAAD,S,QCROkC,MAbf,WAAqB,IACXvC,EAAUe,qBAAWpB,GAArBK,MACR,OACE,yBAAKwC,GAAG,OAAOC,IAAKC,gBAClB,kBAACC,EAAA,EAAD,KACG3C,EAAMW,KAAI,SAACN,GAAD,OACT,kBAAC,EAAD,CAAMA,KAAMA,UCSPuC,MAdf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,KAIE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCHY4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c9b89acf.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\r\n\r\nexport const TaskContext = createContext();\r\n\r\nconst TaskContextProvider = (props) => {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  // useEffect(() => {\r\n  //   // fires when app component mounts to the DOM\r\n  //   const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\r\n  //   if (storageTodos) {\r\n  //     setTodos(storageTodos);\r\n  //   }\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   // fires when todos array gets updated\r\n  //   localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\r\n  // }, [todos]);\r\n\r\n  function addTodo(todo) {\r\n    setTodos([todo, ...todos]);\r\n  }\r\n\r\n  function toggleComplete(todoele) {\r\n    setTodos(\r\n      todos.map((todo) => {\r\n        if (todo.task === todoele.task) {\r\n          return {\r\n            ...todo,\r\n            completed: !todo.completed,\r\n          };\r\n        }\r\n        return todo;\r\n      })\r\n    );\r\n  }\r\n\r\n  function removeTodo(todoele) {\r\n    setTodos(todos.filter((todo) => todo.task !== todoele.task));\r\n  }\r\n  return (\r\n    <TaskContext.Provider\r\n      value={{\r\n        todos,\r\n        addTodo,\r\n        removeTodo,\r\n        toggleComplete,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </TaskContext.Provider>\r\n  );\r\n};\r\nexport default TaskContextProvider;\r\n","import { Button, TextField } from \"@material-ui/core\";\r\nimport \"./todoForm.css\";\r\nimport React, { useState, useContext } from \"react\";\r\nimport { TaskContext } from \"../TaskContext\";\r\n\r\nfunction TodoForm() {\r\n  const { addTodo } = useContext(TaskContext);\r\n  const [todo, setTodo] = useState({\r\n    task: \"\",\r\n    completed: false,\r\n  });\r\n\r\n  function handleTaskInputChange(e) {\r\n    // e.target.value contains new input from onChange\r\n    // event for input elements\r\n    setTodo({ ...todo, task: e.target.value });\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault(); // prevents browser refresh\r\n    // trim() gets rid of string whitespace\r\n    if (todo.task.trim()) {\r\n      addTodo({ ...todo });\r\n      setTodo({ ...todo, task: \"\" });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className=\"todo-form form-inline\" onSubmit={handleSubmit}>\r\n      <div className=\"input\">\r\n        <TextField\r\n          label=\"Task\"\r\n          type=\"text\"\r\n          name=\"task\"\r\n          value={todo.task}\r\n          onChange={handleTaskInputChange}\r\n        />\r\n        {\"  \"}\r\n      </div>\r\n      <div className=\"button\">\r\n        <button type=\"submit\">Submit</button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import { Checkbox, IconButton, ListItem, Typography } from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport React, { useContext } from \"react\";\r\nimport { TaskContext } from \"../TaskContext\";\r\n\r\nfunction Todo({ todo }) {\r\n  const { toggleComplete, removeTodo } = useContext(TaskContext);\r\n  function handleCheckboxClick() {\r\n    toggleComplete(todo);\r\n  }\r\n\r\n  function handleRemoveClick() {\r\n    removeTodo(todo);\r\n  }\r\n\r\n  return (\r\n    <ListItem style={{ display: \"flex\" }}>\r\n      <Checkbox checked={todo.completed} onClick={handleCheckboxClick} />\r\n      <Typography\r\n        variant=\"body1\"\r\n        style={{\r\n          textDecoration: todo.completed ? \"line-through\" : null,\r\n        }}\r\n      >\r\n        {todo.task}\r\n      </Typography>\r\n      <IconButton onClick={handleRemoveClick}>\r\n        <CloseIcon />\r\n      </IconButton>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import { List } from \"@material-ui/core\";\r\nimport React, { useContext } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport { v4 as uuid4 } from \"uuid\";\r\nimport { TaskContext } from \"../TaskContext\";\r\n\r\nfunction TodoList() {\r\n  const { todos } = useContext(TaskContext);\r\n  return (\r\n    <div id=\"Task\" key={uuid4()}>\r\n      <List>\r\n        {todos.map((todo) => (\r\n          <Todo todo={todo} />\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport \"./App.css\";\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\nimport TaskContextProvider from \"./TaskContext\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TaskContextProvider>\n        {/* <Typography style={{ padding: 16 },} variant=\"h3\">\n          Todo List\n        </Typography> */}\n        <TodoForm />\n        <TodoList />\n      </TaskContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}